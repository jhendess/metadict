#
# The MIT License (MIT)
#
# Copyright (c) 2015 Jakob HendeÃŸ
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

#######################################################################################################################
# This file contains the configuration for the default storage backend in metadict. Upon booting, metadict will       #
# search for StorageServiceProvider implementations and register all available implementations in the                 #
# StorageServiceFactory. When multiple implementations with the same name have been found, the boot process will      #
# abort. The default storage service can be set through the storage.default variable. To configure additional aspects #
# of the used storage backend use variables in the form of storage.[BACKEND_NAME].[CONFIG_OPTION].                    #
#                                                                                                                     #
# Example:                                                                                                            #
#  The host for the elasticsearch backend could be configured by setting the storage.elasticsearch.host property.     #
#                                                                                                                     #
# In case you don't need any persistent storage, the "inmemory" backend can be used. Metadict will refuse to boot     #
# when no storage is configured.                                                                                      #
#######################################################################################################################


#
# Set the name of the default storage backend to use.
# In case you don't need any persistent storage, the "inmemory" backend can be used. Metadict will refuse to boot
# when no storage is configured.
#
#storage.default = inmemory

storage.default = mapdb

#
# Set the operation mode for the backend. MapDB can either use a temporary storage or a file based storage.
# Valid values:
#  - "temporary"  -> Start MapDB with a temporary storage (i.e. inmemory). All stored data will be lost after shutdown.
#  - "file"       -> Start MapDB with a file storage. All data will be permanently written to this file and are still
#                    available after shutdown. Note, that you have to set the property mapdb.fileName accordingly!
#
storage.mapdb.mode = file

#
# Set the path of the file that will be used as data storage. The path can either be absolute or relative. Make sure,
# that you have write access to the specified file or booting might fail. It is recommended to use a file name without
# an extension to avoid problems.
#
storage.mapdb.filepath = /var/lib/metadict/mapdb_data

#
# Set "true" to enable memory mapped files. Memory mapped files may increase the performance significantly but might
# lead to crashes when using a 32-bit JVM. You will encounter an OutOfMemoryError when using a 32-bit JVM and data
# stores with more than 4gb.
#
storage.mapdb.enableMmapFile = true

#
# Set "true" to disable transactions. This makes writes faster, but might lose data if the store crashes.
#
storage.mapdb.disableTransactions = false

#
# Enables a mode where all modifications are queued and written into disk on Background Writer Thread.
#
storage.mapdb.enableAsyncWrite = true